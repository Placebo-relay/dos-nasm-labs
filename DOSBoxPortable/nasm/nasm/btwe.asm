 org 0x100

 mov ah, 0x00 ; Функция BIOS выбора графического режима

 mov ax, 0x0012
 int 10h

 mov ax, 0x0000 ; Функция инициализации мыши
 int 0x33 ; Вызов прерывания

 mov ax, 0x0001 ; Показать курсор мыши
 int 0x33 ; Вызов прерывания

 mov ax, 0x000c ; Установка обработчика событий мыши
 mov cx, 0x0001 ; Событие - любое перемещение мыши
 mov dx, MouseHandler ; Адрес обработчика
 int 0x33 ; Вызов прерывания

 nokey:
 mov ah, 0x01 ; Функция чтения клавиатуры
 int 0x16 ; Вызов BIOS
 jz nokey ; Переходим, если ничего не прочитано, т.е.
 ; находимся здесь, пока не будет нажата клавиша

 mov ax, 0x0014 ; Удаление обработчика событий мыши
 mov cx, 0x0000 ;
 int 0x33 ; Вызов прерывания

 mov ah, 0x00 ; Функция BIOS выбора графического режима
 mov al, 0x03 ; Текстовый режим 80x25, 16 цветов
 int 0x10 ; Вызов BIOS

 ret

 MouseHandler:

 mov ax, 0x0003 ; Проверка состояния мыши
 int 0x33 ; Вызов прерывания

 test bx, 0x0001 ; Поднят ли бит, отвечающий за сигнализацию
 ; о нажатии кнопки?

 jnz .change_color ; Если поднят - изменяем цвет

 .further:

 mov ax, 0x0002 ; Функция скрытия курсора
 int 0x33 ; Вызов прерывания

 xor bx, bx ; Очищаем bx, т.к. этот регистр используется
 ; для указания текущей страницы видеопамяти
 mov al, [pointer_color] ; Забираем из памяти значение цвета
 mov ah, 0x0c ; Функция отрображения точки
 int 0x10 ; Вызов BIOS

 mov ax, 0x0001 ; Показываем курсор
 int 0x33

 retf ; Возврат из обработчика события мыши

 .change_color:

 push ax ; Запоминаем ax
 mov al, [pointer_color] ; Забираем из памяти значение цвета
 inc al ; Увеличиваем номер цвета на 1
 mov [pointer_color], al ; Сохраняем номер цвета в памяти
 pop ax ; Восстанавливаем ax

 jmp .further ; Возврат из фрагмента кода

 pointer_color db 1
